# -*- coding: utf-8 -*-
"""lsa

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15AlOi9sMcNFr09xriZq7VSWXnWQtmosQ
"""

from sklearn.decomposition import TruncatedSVD
from sklearn.feature_extraction.text import TfidfVectorizer
from gensim.models.coherencemodel import CoherenceModel
from gensim.corpora.dictionary import Dictionary

class LSAModel:
    def __init__(self, n_components):
        self.model = TruncatedSVD(n_components=n_components, random_state=42)
        self.vectorizer = TfidfVectorizer()
        self.trained_model = None

    def train(self, documents):
        # Vectorize documents
        doc_term_matrix = self.vectorizer.fit_transform(documents)
        # Train the LSA model
        self.trained_model = self.model.fit(doc_term_matrix)

    def get_topics(self, n_words=10):
        if self.trained_model is None:
            raise ValueError("Model not trained. Call the train() method first.")

        feature_names = self.vectorizer.get_feature_names_out()
        topic_dict = {}
        for topic_idx, components in enumerate(self.trained_model.components_):
            top_features_ind = components.argsort()[:-n_words - 1:-1]
            top_words = [feature_names[i] for i in top_features_ind]
            topic_dict['Topic # ' + '{:02d}'.format(topic_idx + 1)] = top_words
        return topic_dict